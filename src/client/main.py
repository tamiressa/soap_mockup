# Arquivo: soap_mockup_client.py
# Descri√ß√£o: Cliente SOAP em Python para testes com soap_mockup_server
# Autor: <github.com/malki-cedheq>
# Criado: 31/07/2025
# Atualizado: 01/08/2025

# Depend√™ncias: zeep, requests, lxml

from zeep import Client
from zeep.transports import Transport
from zeep.plugins import HistoryPlugin
from requests import Session
from requests.auth import HTTPBasicAuth
from lxml import etree
import logging
import os
from logging.handlers import RotatingFileHandler

# ==========================
# Configura√ß√£o de Logging
# ==========================
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()  # DEBUG, INFO, WARNING, ERROR
LOG_FILE = os.getenv("LOG_FILE", "soap_client.log")
MAX_LOG_SIZE = int(os.getenv("MAX_LOG_SIZE", 1 * 1024 * 1024))  # 1 MB
BACKUP_COUNT = int(os.getenv("BACKUP_COUNT", 5))

logger = logging.getLogger("soap_mockup_client")
logger.setLevel(LOG_LEVEL)

# Handler de arquivo com rota√ß√£o
file_handler = RotatingFileHandler(
    LOG_FILE, maxBytes=MAX_LOG_SIZE, backupCount=BACKUP_COUNT, encoding="utf-8"
)
formatter = logging.Formatter("%(asctime)s [%(levelname)s] %(message)s")
file_handler.setFormatter(formatter)

# Handler de console
console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)

logger.addHandler(file_handler)
logger.addHandler(console_handler)

# ==========================
# Configura√ß√µes do cliente
# ==========================
USERNAME = "usuario_teste"
PASSWORD = "senha_teste"
WSDL_URL = "http://127.0.0.1:8000/?wsdl"

# ==========================
# Inicializa√ß√£o da sess√£o SOAP
# ==========================
logger.info(f"Iniciando cliente SOAP para {WSDL_URL}")

# Configura sess√£o HTTP com autentica√ß√£o b√°sica
session = Session()
session.auth = HTTPBasicAuth(USERNAME, PASSWORD)

# Transport com sess√£o autenticada
transport = Transport(session=session)

# Plugin para capturar hist√≥rico SOAP (request/response)
history = HistoryPlugin()

# Cria cliente SOAP Zeep
client = Client(WSDL_URL, transport=transport, plugins=[history])
logger.info("Cliente SOAP inicializado com sucesso")


# ==========================
# Fun√ß√£o auxiliar para exibir XML detalhado
# ==========================
def print_soap_history():
    """
    Exibe e registra no log o XML completo da √∫ltima requisi√ß√£o e resposta SOAP.
    Dispon√≠vel apenas se LOG_LEVEL estiver como DEBUG.
    """
    if history.last_sent and logger.isEnabledFor(logging.DEBUG):
        xml_req = etree.tostring(
            history.last_sent["envelope"], pretty_print=True
        ).decode()
        logger.debug(f"üì§ SOAP Request:\n{xml_req}")
    if history.last_received and logger.isEnabledFor(logging.DEBUG):
        xml_res = etree.tostring(
            history.last_received["envelope"], pretty_print=True
        ).decode()
        logger.debug(f"üì• SOAP Response:\n{xml_res}")


# ==========================
# Fun√ß√£o de Inicializa√ß√£o do client
# ==========================
def main():
    # ==========================
    # 1Ô∏è‚É£ Criar novo pedido
    # ==========================
    logger.info("Enviando requisi√ß√£o: criar_pedido")
    novo_id = client.service.criar_pedido("Pedido autenticado")
    logger.info(f"‚úÖ Novo pedido criado com ID: {novo_id}")
    print_soap_history()

    # ==========================
    # 2Ô∏è‚É£ Consultar status do pedido
    # ==========================
    logger.info(f"Enviando requisi√ß√£o: consultar_status para ID={novo_id}")
    status = client.service.consultar_status(novo_id)
    logger.info(f"üìå Status do pedido {novo_id}: {status}")
    print_soap_history()

    # ==========================
    # 3Ô∏è‚É£ Cancelar pedido
    # ==========================
    logger.info(f"Enviando requisi√ß√£o: cancelar_pedido para ID={novo_id}")
    resultado = client.service.cancelar_pedido(novo_id)
    logger.info(f"‚ùå Pedido {novo_id} cancelado? {resultado}")
    print_soap_history()


# ==========================
# Inicializa√ß√£o do client
# ==========================
if __name__ == "__main__":
    main()
